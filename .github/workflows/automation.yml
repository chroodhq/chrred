name: Deployment

on:
  push:
  pull_request:

jobs:
  build:
    name: Build Lambda package
    runs-on: ubuntu-latest

    env:
      POETRY_VERSION: 1.2.2
      PYTHON_VERSION: 3.9.15

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Load Poetry ${{ env.POETRY_VERSION }} cache
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-${{ env.POETRY_VERSION }}
      
      - name: Install Poetry ${{ env.POETRY_VERSION }}
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
            venv-${{ runner.os }}-
            venv-

      - name: Install dependencies
        id: install
        run: make install

      - name: Lint project
        id: lint
        run: make lint

      - name: Generate requirements.txt
        run: poetry export -o requirements.txt

      - name: Generate wheels in dist folder
        run: poetry build

      - name: Prepare target folder
        run: |
          mkdir target
          cd target
          mv ../dist .

      - name: Build AWS Lambda bundle
        run: | 
          poetry run pip install --upgrade -t target/package target/dist/*.whl
          mv target/package terraform/package

      - name: Cache lambda package
        id: cached-lambda-package
        uses: actions/cache/save@v3
        with:
          path: terraform/package
          key: lambda-package-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
  
  deploy_test:
    needs: build

    uses: chroodhq/.github/.github/workflows/reusable-deployment.yml@main
    with:
      environment: test
      stack_name: chrred-link-shortener
    secrets: inherit

    permissions:
      id-token: write
      contents: read
      pull-requests: write

  deploy_live:
    needs: deploy_test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    uses: chroodhq/.github/.github/workflows/reusable-deployment.yml@main
    with:
      environment: live
      stack_name: chrred-link-shortener
    secrets: inherit

    permissions:
      id-token: write
      contents: read
      pull-requests: write
